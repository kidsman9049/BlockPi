// This file was automatically generated.  Do not modify.

'use strict';

Blockly.Msg["ADD_COMMENT"] = "Add Comment";
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Can't delete the variable '%1' because it's part of the definition of the function '%2'";
Blockly.Msg["CHANGE_VALUE_TITLE"] = "Change value:";
Blockly.Msg["CLEAN_UP"] = "Clean up Blocks";
Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Collapsed blocks contain warnings.";
Blockly.Msg["COLLAPSE_ALL"] = "Collapse Blocks";
Blockly.Msg["COLLAPSE_BLOCK"] = "Collapse Block";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "colour 1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "colour 2";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "https://meyerweb.com/eric/tools/color-blend/#:::rgbp";
Blockly.Msg["COLOUR_BLEND_RATIO"] = "ratio";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "blend";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Blends two colours together with a given ratio (0.0 - 1.0).";
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Choose a colour from the palette.";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "random colour";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Choose a colour at random.";
Blockly.Msg["COLOUR_RGB_BLUE"] = "blue";
Blockly.Msg["COLOUR_RGB_GREEN"] = "green";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "https://www.december.com/html/spec/colorpercompact.html";
Blockly.Msg["COLOUR_RGB_RED"] = "red";
Blockly.Msg["COLOUR_RGB_TITLE"] = "colour with";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "break out of loop";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continue with next iteration of loop";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Break out of the containing loop.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Skip the rest of this loop, and continue with the next iteration.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Warning: This block may only be used within a loop.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "for each item %1 in list %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg["CONTROLS_FOR_TITLE"] = "count with %1 from %2 to %3 by %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Add a condition to the if block.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Add a final, catch-all condition to the if block.";
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this if block.";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "else";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "else if";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "if";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "If a value is true, then do some statements.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "do";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "repeat %1 times";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Do some statements several times.";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "repeat until";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "repeat while";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "While a value is false, then do some statements.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "While a value is true, then do some statements.";
Blockly.Msg["DELETE_ALL_BLOCKS"] = "Delete all %1 blocks?";
Blockly.Msg["DELETE_BLOCK"] = "Delete Block";
Blockly.Msg["DELETE_VARIABLE"] = "Delete the '%1' variable";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "Delete %1 uses of the '%2' variable?";
Blockly.Msg["DELETE_X_BLOCKS"] = "Delete %1 Blocks";
Blockly.Msg["DISABLE_BLOCK"] = "Disable Block";
Blockly.Msg["DUPLICATE_BLOCK"] = "Duplicate";
Blockly.Msg["DUPLICATE_COMMENT"] = "Duplicate Comment";
Blockly.Msg["ENABLE_BLOCK"] = "Enable Block";
Blockly.Msg["EXPAND_ALL"] = "Expand Blocks";
Blockly.Msg["EXPAND_BLOCK"] = "Expand Block";
Blockly.Msg["EXTERNAL_INPUTS"] = "External Inputs";
Blockly.Msg["HELP"] = "Help";
Blockly.Msg["INLINE_INPUTS"] = "Inline Inputs";
Blockly.Msg["IOS_CANCEL"] = "Cancel";
Blockly.Msg["IOS_ERROR"] = "Error";
Blockly.Msg["IOS_OK"] = "OK";
Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ Add Input";
Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Allow statements";
Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "This function has duplicate inputs.";
Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "INPUTS";
Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "Add";
Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+ Add Variable";
Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "Delete";
Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "You can't use an empty variable name.";
Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "Rename";
Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "Variable name";
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "create empty list";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Returns a list, of length 0, containing no data records";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "list";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "create list with";
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Add an item to the list.";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "Create a list with any number of items.";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "first";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "# from end";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";
Blockly.Msg["LISTS_GET_INDEX_GET"] = "get";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "get and remove";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "last";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "random";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "remove";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Returns the first item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Returns the item at the specified position in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Returns the last item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Returns a random item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Removes and returns the first item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Removes and returns the item at the specified position in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Removes and returns the last item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Removes and returns a random item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Removes the first item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Removes the item at the specified position in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Removes the last item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Removes a random item in a list.";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "to # from end";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "to #";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "to last";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "get sub-list from first";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "get sub-list from # from end";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "get sub-list from #";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Creates a copy of the specified portion of a list.";
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 is the last item.";
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 is the first item.";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "find first occurrence of item";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "find last occurrence of item";
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Returns the index of the first/last occurrence of the item in the list. Returns %1 if item is not found.";
Blockly.Msg["LISTS_INLIST"] = "in list";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 is empty";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Returns true if the list is empty.";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg["LISTS_LENGTH_TITLE"] = "length of %1";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Returns the length of a list.";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_REPEAT_TITLE"] = "create list with item %1 repeated %2 times";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "reverse %1";
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Reverse a copy of a list.";
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "as";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "insert at";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "set";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Inserts the item at the start of a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Inserts the item at the specified position in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Append the item to the end of a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Inserts the item randomly in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Sets the first item in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Sets the item at the specified position in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Sets the last item in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Sets a random item in a list.";
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "ascending";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "descending";
Blockly.Msg["LISTS_SORT_TITLE"] = "sort %1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Sort a copy of a list.";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "alphabetic, ignore case";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "numeric";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "alphabetic";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "make list from text";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "make text from list";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Join a list of texts into one text, separated by a delimiter.";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Split text into a list of texts, breaking at each delimiter.";
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "with delimiter";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "false";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Returns either true or false.";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "true";
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Return true if both inputs equal each other.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Return true if the first input is greater than the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Return true if the first input is greater than or equal to the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Return true if the first input is smaller than the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Return true if the first input is smaller than or equal to the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Return true if both inputs are not equal to each other.";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "not %1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Returns true if the input is false. Returns false if the input is true.";
Blockly.Msg["LOGIC_NULL"] = "null";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Returns null.";
Blockly.Msg["LOGIC_OPERATION_AND"] = "and";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg["LOGIC_OPERATION_OR"] = "or";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Return true if both inputs are true.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Return true if at least one of the inputs is true.";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "test";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "if false";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "if true";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Return the sum of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Return the quotient of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Return the difference of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Return the product of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Return the first number raised to the power of the second number.";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://en.wikipedia.org/wiki/Atan2";
Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 of X:%1 Y:%2";
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Return the arctangent of point (X, Y) in degrees from -180 to 180.";
Blockly.Msg["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg["MATH_CHANGE_TITLE"] = "change %1 by %2";
Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "Add a number to variable '%1'.";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "constrain %1 low %2 high %3";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "is divisible by";
Blockly.Msg["MATH_IS_EVEN"] = "is even";
Blockly.Msg["MATH_IS_NEGATIVE"] = "is negative";
Blockly.Msg["MATH_IS_ODD"] = "is odd";
Blockly.Msg["MATH_IS_POSITIVE"] = "is positive";
Blockly.Msg["MATH_IS_PRIME"] = "is prime";
Blockly.Msg["MATH_IS_TOOLTIP"] = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
Blockly.Msg["MATH_IS_WHOLE"] = "is whole";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg["MATH_MODULO_TITLE"] = "remainder of %1 ÷ %2";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Return the remainder from dividing the two numbers.";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "A number.";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "average of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "max of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "median of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "min of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "modes of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "random item of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "standard deviation of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "sum of list";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Return the largest number in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Return the median number in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Return the smallest number in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Return a list of the most common item(s) in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Return a random element from the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Return the standard deviation of the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Return the sum of all the numbers in the list.";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "random fraction";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "random integer from %1 to %2";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Return a random integer between the two specified limits, inclusive.";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "round";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "round down";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "round up";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Round a number up or down.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "absolute";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "square root";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Return the absolute value of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Return e to the power of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Return the natural logarithm of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Return the base 10 logarithm of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Return the negation of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Return 10 to the power of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Return the square root of a number.";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";
Blockly.Msg["MATH_TRIG_COS"] = "cos";
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";
Blockly.Msg["MATH_TRIG_TAN"] = "tan";
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Return the arccosine of a number.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Return the arcsine of a number.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Return the arctangent of a number.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Return the cosine of a degree (not radian).";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Return the sine of a degree (not radian).";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Return the tangent of a degree (not radian).";
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Create colour variable...";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Create number variable...";
Blockly.Msg["NEW_STRING_VARIABLE"] = "Create string variable...";
Blockly.Msg["NEW_VARIABLE"] = "Create variable...";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "New variable name:";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "New variable type:";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "allow statements";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "with:";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Run the user-defined function '%1'.";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Run the user-defined function '%1' and use its output.";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "with:";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "Create '%1'";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Describe this function...";
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "do something";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "to";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Creates a function with no output.";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "return";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Creates a function with an output.";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Warning: This function has duplicate parameters.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Highlight function definition";
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "If a value is true, then return a second value.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Warning: This block may be used only within a function definition.";
Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "input name:";
Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "Add an input to the function.";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "inputs";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Add, remove, or reorder inputs to this function.";
Blockly.Msg["REDO"] = "Redo";
Blockly.Msg["REMOVE_COMMENT"] = "Remove Comment";
Blockly.Msg["RENAME_VARIABLE"] = "Rename variable...";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Rename all '%1' variables to:";
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_APPEND_TITLE"] = "to %1 append text %2";
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Append some text to variable '%1'.";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "to lower case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "to Title Case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "to UPPER CASE";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Return a copy of the text in a different case.";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "get first letter";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "get letter # from end";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "get letter #";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg["TEXT_CHARAT_LAST"] = "get last letter";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "get random letter";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";
Blockly.Msg["TEXT_CHARAT_TITLE"] = "in text %1 %2";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Returns the letter at the specified position.";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "count %1 in %2";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Count how many times some text occurs within some other text.";
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Add an item to the text.";
Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "join";
Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "to letter # from end";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "to letter #";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "to last letter";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "in text";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "get substring from first letter";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "get substring from letter # from end";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "get substring from letter #";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Returns a specified portion of the text.";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "find first occurrence of text";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "find last occurrence of text";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "in text %1 %2 %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 is empty";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Returns true if the provided text is empty.";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "create text with";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Create a piece of text by joining together any number of items.";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_LENGTH_TITLE"] = "length of %1";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg["TEXT_PRINT_TITLE"] = "print %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Print the specified text, number or other value.";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Prompt for user for a number.";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Prompt for user for some text.";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "prompt for number with message";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "prompt for text with message";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "replace %1 with %2 in %3";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Replace all occurances of some text within some other text.";
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";
Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "reverse %1";
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Reverses the order of the characters in the text.";
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "A letter, word, or line of text.";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "trim spaces from both sides of";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "trim spaces from left side of";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "trim spaces from right side of";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Return a copy of the text with spaces removed from one or both ends.";
Blockly.Msg["TODAY"] = "Today";
Blockly.Msg["UNDO"] = "Undo";
Blockly.Msg["UNNAMED_KEY"] = "unnamed";
Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "item";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Create 'set %1'";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Returns the value of this variable.";
Blockly.Msg["VARIABLES_SET"] = "set %1 to %2";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Create 'get %1'";
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Sets this variable to be equal to the input.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "A variable named '%1' already exists.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "A variable named '%1' already exists for another type: '%2'.";
Blockly.Msg["WORKSPACE_ARIA_LABEL"] = "Blockly Workspace";
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Say something...";
Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["MATH_CHANGE_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];

Blockly.Msg["LOGIC_HUE"] = "210";
Blockly.Msg["LOOPS_HUE"] = "120";
Blockly.Msg["MATH_HUE"] = "230";
Blockly.Msg["TEXTS_HUE"] = "160";
Blockly.Msg["LISTS_HUE"] = "260";
Blockly.Msg["DICTIONARIES_HUE"] = "275";
Blockly.Msg["COLOUR_HUE"] = "20";
Blockly.Msg["TIME_HUE"] = "65";
Blockly.Msg["VARIABLES_HUE"] = "330";
Blockly.Msg["VARIABLES_DYNAMIC_HUE"] = "310";
Blockly.Msg["PROCEDURES_HUE"] = "290";
Blockly.Msg["GPIOIN_HUE"] = "180";
Blockly.Msg["GPIOOUT_HUE"] = "0";
Blockly.Msg["SENSEHAT_HUE"] = "40";
Blockly.Msg["CAMERA_HUE"] = "135";
Blockly.Msg["COMMM_HUE"] = "40";

Blockly.Msg["COLOUR_CONVERT_TITLE"] = "convert colour %1 to RGB array"
Blockly.Msg["COLOUR_CONVERT_TOOLTIP"] = "Converts the colour to an array of RGB values(0-255)."
Blockly.Msg["LISTS_EXTEND_TITLE"] = "extend list1 %1 with list2 %2";
Blockly.Msg["LISTS_EXTEND_TOOLTIP"] = "Adds all the items in list2 to the end of list1."
Blockly.Msg["TIME_SLEEP_TITLE"] = "sleep for %1 second(s)";
Blockly.Msg["TIME_SLEEP_TOOLTIP"] = "Waits for some time.";
Blockly.Msg["TIME_STAMP_TITLE"] = "time stamp";
Blockly.Msg["TIME_STAMP_TOOLTIP"] = "Returns present time stamp.";
Blockly.Msg["TIME_TIME_STRUCT_TITLE"] = "present %1";
Blockly.Msg["TIME_TIME_STRUCT_YEAR"] = "year";
Blockly.Msg["TIME_TIME_STRUCT_MON"] = "month of the year";
Blockly.Msg["TIME_TIME_STRUCT_MDAY"] = "day of the month";
Blockly.Msg["TIME_TIME_STRUCT_HOUR"] = "hour";
Blockly.Msg["TIME_TIME_STRUCT_MIN"] = "minute";
Blockly.Msg["TIME_TIME_STRUCT_SEC"] = "second";
Blockly.Msg["TIME_TIME_STRUCT_WDAY"] = "day of the week(0-6)";
Blockly.Msg["TIME_TIME_STRUCT_YDAY"] = "day of the year";
Blockly.Msg["TIME_TIME_STRUCT_TOOLTIP"] = "Returns present time/date data.";
Blockly.Msg["TIME_TIME_TITLE"] = "present time";
Blockly.Msg["TIME_TIME_TOOLTIP"] = "Returns a string of present time(HH:mm:ss).";
Blockly.Msg["TIME_DATE_TITLE"] = "present date";
Blockly.Msg["TIME_DATE_TOOLTIP"] = "Returns a string of present date(yyyy-MM-dd).";
Blockly.Msg["GPIO_DEVICES_IN_TITLE"] = "%1";
Blockly.Msg["GPIO_DEVICES_IN_TOOLTIP"] = "An Input device.";
Blockly.Msg["GPIO_INPUT_DIGITAL_TITLE"] = "set GPIO %1 as digital input %2";
Blockly.Msg["GPIO_INPUT_DIGITAL_TOOLTIP"] = "Sets a GPIO port to digital input, in BCM numbering.";
Blockly.Msg["GPIO_INPUT_SMOOTHED_TITLE"] = "set GPIO %1 as smoothed input %2";
Blockly.Msg["GPIO_INPUT_SMOOTHED_TOOLTIP"] = "Sets a GPIO port to smoothed input, in BCM numbering.";
Blockly.Msg["GPIO_BUTTON_TITLE"] = "set GPIO %1 as button %2";
Blockly.Msg["GPIO_BUTTON_TOOLTIP"] = "Sets a GPIO port to connect a button.";
Blockly.Msg["GPIO_LINESENSOR_TITLE"] = "set GPIO %1 as linesensor %2";
Blockly.Msg["GPIO_LINESENSOR_TOOLTIP"] = "Sets a GPIO port to connect a linesensor(infra-red proximity sensor).";
Blockly.Msg["GPIO_MOTIONSENSOR_TITLE"] = "set GPIO %1 as motionsensor %2";
Blockly.Msg["GPIO_MOTIONSENSOR_TOOLTIP"] = "Sets a GPIO port to connect a passive infra-red (PIR) motion sensor.";
Blockly.Msg["GPIO_LIGHTSENSOR_TITLE"] = "set GPIO %1 as lightsensor %2";
Blockly.Msg["GPIO_LIGHTSENSOR_TOOLTIP"] = "Sets a GPIO port to connect a lightsensor(light dependent resistor).";
Blockly.Msg["GPIO_DISTANCESENSOR_TITLE"] = "set GPIO %1 (echo) %2 (trigger) as distance sensor %3";
Blockly.Msg["GPIO_DISTANCESENSOR_TOOLTIP"] = "Sets two GPIO ports to connect an ultrasonic distance sensor(HC-SR04), one for echo and the other for trigger. The max distance is 1 meter.";
Blockly.Msg["GPIO_INPUT_VALUE_TITLE"] = "the value of %1";
Blockly.Msg["GPIO_INPUT_VALUE_TOOLTIP"] = "Returns a value representing the device's state. Frequently, this is a boolean value, or a number between 0 and 1. For distance sensor, the unit is meters(m).";
Blockly.Msg["GPIO_CLOSE_IN_TITLE"] = "close %1 and release the port";
Blockly.Msg["GPIO_CLOSE_IN_TOOLTIP"] = "Shuts down the device and release all associated resources.";
Blockly.Msg["GPIO_DEVICES_OUT_TITLE"] = "%1";
Blockly.Msg["GPIO_DEVICES_OUT_TOOLTIP"] = "An output device.";
Blockly.Msg["GPIO_OUTPUT_TITLE"] = "set GPIO %1 as digital output %2";
Blockly.Msg["GPIO_OUTPUT_TOOLTIP"] = "Sets a GPIO port to digital output, in BCM numbering.";
Blockly.Msg["GPIO_LED_TITLE"] = "set GPIO %1 as LED %2";
Blockly.Msg["GPIO_LED_TOOLTIP"] = "Sets a GPIO port to connect a LED.";
Blockly.Msg["GPIO_BUZZER_TITLE"] = "set GPIO %1 as buzzer %2";
Blockly.Msg["GPIO_BUZZER_TOOLTIP"] = "Sets a GPIO port to connect an active buzzer.";
Blockly.Msg["GPIO_OUTPUT_ON_TITLE"] = "turn %1 on";
Blockly.Msg["GPIO_OUTPUT_ON_TOOLTIP"] = "Turns on the device.";
Blockly.Msg["GPIO_OUTPUT_OFF_TITLE"] = "turn %1 off";
Blockly.Msg["GPIO_OUTPUT_OFF_TOOLTIP"] = "Turns off the device.";
Blockly.Msg["GPIO_OUTPUT_TOGGLE_TITLE"] = "toggle %1 output";
Blockly.Msg["GPIO_OUTPUT_TOGGLE_TOOLTIP"] = "Toggles the device's output.";
Blockly.Msg["GPIO_CLOSE_OUT_TITLE"] = Blockly.Msg["GPIO_CLOSE_IN_TITLE"];
Blockly.Msg["GPIO_CLOSE_OUT_TOOLTIP"] = Blockly.Msg["GPIO_CLOSE_IN_TOOLTIP"];
Blockly.Msg["GPIO_RGBLED_TITLE"] = "set GPIO %1 %2 %3 as RGB LED %4";
Blockly.Msg["GPIO_RGBLED_TOOLTIP"] = "Sets three GPIO ports(for R, G, and B) to connect a RGB LED.";
Blockly.Msg["GPIO_RGBLED_COLOUR_TITLE"] = "set %1 colour to %2";
Blockly.Msg["GPIO_RGBLED_COLOUR_TOOLTIP"] = "Sets the RGB LED's colour.";
Blockly.Msg["GPIO_PWM_TITLE"] = "set GPIO %1 as PWM output %2";
Blockly.Msg["GPIO_PWM_TOOLTIP"] = "Sets a GPIO port to PWM output, in BCM numbering.";
Blockly.Msg["GPIO_PWM_BREATH_TITLE"] = "set %1 as BLN, on time: %2 off time: %3 fade in time: %4 fade out time: %5 times to blink: %6";
Blockly.Msg["GPIO_PWM_BREATH_TOOLTIP"] = "Sets the PWM device to a breathing light. If the times to blink is null, the device will breathe for ever.";
Blockly.Msg["GPIO_PWM_DC_TITLE"] = "set %1 duty cycle %2 %%";
Blockly.Msg["GPIO_PWM_DC_TOOLTIP"] = "Sets the PWM device's duty cycle(in percentage).";
Blockly.Msg["GPIO_PWM_FREQUENCY_TITLE"] = "set %1 frequency %2 Hz";
Blockly.Msg["GPIO_PWM_FREQUENCY_TOOLTIP"] = "Sets the PWM device's frequency(in Hz).";
Blockly.Msg["GPIO_OUTPUT_VALUE_TITLE"] = Blockly.Msg["GPIO_INPUT_VALUE_TITLE"];
Blockly.Msg["GPIO_OUTPUT_VALUE_TOOLTIP"] = "Returns a value representing the device's state. Frequently, this is a boolean value, or a number between 0 and 1. For PWM devices, this value is duty cycle.";
Blockly.Msg["GPIO_OUTPUT_VALUE_SET_TITLE"] = "set the value of %1 to %2";
Blockly.Msg["GPIO_OUTPUT_VALUE_SET_TOOLTIP"] = "Sets the device's output value and change its state, a boolean value or a number between 0 and 1 is available.";
Blockly.Msg["SENSEHAT_INITIALIZE_TITLE"] = "initialize Sense HAT. emulator: %1";
Blockly.Msg["SENSEHAT_INITIALIZE_TOOLTIP"] = "Initializes the Sense HAT, choose whether to use the emulator.";
Blockly.Msg["SENSEHAT_SET_ROTATION_TITLE"] = "set rotation %1";
Blockly.Msg["SENSEHAT_SET_ROTATION_TOOLTIP"] = "Rotates the LED matrix, 0° is with the Raspberry Pi HDMI port facing downwards.";
Blockly.Msg["SENSEHAT_FLIP_H_TITLE"] = "flip horizontally";
Blockly.Msg["SENSEHAT_FLIP_H_TOOLTIP"] = "Flips the image on the LED matrix horizontally.";
Blockly.Msg["SENSEHAT_FLIP_V_TITLE"] = "flip vertically";
Blockly.Msg["SENSEHAT_FLIP_V_TOOLTIP"] = "Flips the image on the LED matrix vertically.";
Blockly.Msg["SENSEHAT_PIXELS_TOOLTIP"] = "Returns a list of 64 pixel colours for the LED matrix.";
Blockly.Msg["SENSEHAT_SET_PIXELS_TITLE"] = "set LED matrix pixels %1";
Blockly.Msg["SENSEHAT_SET_PIXELS_TOOLTIP"] = "Updates the entire LED matrix based on a 64 length list of pixel values.";
Blockly.Msg["SENSEHAT_SET_PIXEL_TITLE"] = "set X: %1 Y: %2 pixel colour %3";
Blockly.Msg["SENSEHAT_SET_PIXEL_TOOLTIP"] = "Sets an individual LED matrix pixel at the specified X-Y coordinate to the specified colour. (0,0) is the top-left pixel.";
Blockly.Msg["SENSEHAT_LOAD_IMAGE_TITLE"] = "display image %1";
Blockly.Msg["SENSEHAT_LOAD_IMAGE_TOOLTIP"] = "Loads an image file from given path and display it on the LED matrix. The image must be 8 x 8 pixels in size.";
Blockly.Msg["SENSEHAT_CLEAR_TITLE"] = "clear the LED matrix %1";
Blockly.Msg["SENSEHAT_CLEAR_TOOLTIP"] = "Sets the entire LED matrix to a single colour, default to blank / off.";
Blockly.Msg["SENSEHAT_SHOW_MESSAGE_TITLE"] = "show message %1 scroll speed %2 text colour %3 background colour %4";
Blockly.Msg["SENSEHAT_SHOW_MESSAGE_TOOLTIP"] = "Scrolls a text message from right to left across the LED matrix and at the specified speed, in the specified colour and background colour.";
Blockly.Msg["SENSEHAT_SHOW_LETTER_TITLE"] = "show letter %1 text colour %2 background colour %3";
Blockly.Msg["SENSEHAT_SHOW_LETTER_TOOLTIP"] = "Displays a single text character(ASCII) on the LED matrix.";
Blockly.Msg["SENSEHAT_LOW_LIGHT_TITLE"] = "toggle low light mode %1";
Blockly.Msg["SENSEHAT_LOW_LIGHT_TOOLTIP"] = "Toggles the LED matrix low light mode, useful if the Sense HAT is being used in a dark environment.";
Blockly.Msg["SENSEHAT_GET_HUMIDITY_TITLE"] = "get humidity";
Blockly.Msg["SENSEHAT_GET_HUMIDITY_TOOLTIP"] = "Gets the percentage of relative humidity from the humidity sensor.";
Blockly.Msg["SENSEHAT_GET_TEMPERATURE_TITLE"] = "get temperature";
Blockly.Msg["SENSEHAT_GET_TEMPERATURE_TOOLTIP"] = "Gets the current temperature in degrees Celsius from the humidity sensor.";
Blockly.Msg["SENSEHAT_GET_PRESSURE_TITLE"] = "get pressure";
Blockly.Msg["SENSEHAT_GET_PRESSURE_TOOLTIP"] = "Gets the current pressure in Millibars from the pressure sensor.";
Blockly.Msg["SENSEHAT_SET_IMU_CONFIG_TITLE"] = "enable compass %1 gyroscope %2 accelerometer %3";
Blockly.Msg["SENSEHAT_SET_IMU_CONFIG_TOOLTIP"] = "Enables or disables the gyroscope, accelerometer and/or magnetometer.";
Blockly.Msg["SENSEHAT_GET_ORIENTATION_TITLE"] = "get orientation";
Blockly.Msg["SENSEHAT_GET_ORIENTATION_TOOLTIP"] = "Gets the current orientation in degrees using the aircraft principal axes of pitch, roll and yaw.";
Blockly.Msg["SENSEHAT_GET_COMPASS_TITLE"] = "get compass";
Blockly.Msg["SENSEHAT_GET_COMPASS_TOOLTIP"] = "Gets the direction of North from the magnetometer in degrees.";
Blockly.Msg["SENSEHAT_GET_GYROSCOPE_TITLE"] = "get gyroscope";
Blockly.Msg["SENSEHAT_GET_GYROSCOPE_TOOLTIP"] = "Gets the current orientation from the gyroscope only, in degrees using the aircraft principal axes of pitch, roll and yaw.";
Blockly.Msg["SENSEHAT_GET_ACCELEROMETER_TITLE"] = "get accelerometer";
Blockly.Msg["SENSEHAT_GET_ACCELEROMETER_TOOLTIP"] = "Gets the raw x, y, z axis accelerometer data in Gs.";
Blockly.Msg["SENSEHAT_WAIT_FOR_EVENT_TITLE"] = "wait for joystick event";
Blockly.Msg["SENSEHAT_WAIT_FOR_EVENT_TOOLTIP"] = "Blocks execution until a joystick event occurs.";
Blockly.Msg["SENSEHAT_EVENT_TIMESTAMP_TITLE"] = "get joystick event timestamp";
Blockly.Msg["SENSEHAT_EVENT_TIMESTAMP_TOOLTIP"] = "Returns the time at which the joystick event occurred.";
Blockly.Msg["SENSEHAT_EVENT_DIRECTION_TITLE"] = "get joystick event direction";
Blockly.Msg["SENSEHAT_EVENT_DIRECTION_TOOLTIP"] = "Returns the direction the joystick was moved, as a string('up', 'down', 'left', 'right', 'middle').";
Blockly.Msg["SENSEHAT_EVENT_ACTION_TITLE"] = "get joystick event action";
Blockly.Msg["SENSEHAT_EVENT_ACTION_TOOLTIP"] = "Returns the action that occurred, as a string('pressed', 'released', 'held').";
Blockly.Msg["SENSEHAT_GET_EVENTS_TITLE"] = "get joystick events";
Blockly.Msg["SENSEHAT_GET_EVENTS_TOOLTIP"] = "Returns a list of tuples representing all events that have occurred since the last call to 'get events' or 'wait for event'.";
Blockly.Msg["SENSEHAT_JOYSTICK_PUSHED_TITLE"] = "when joystick is pushed to %1 direction %2 do %3";
Blockly.Msg["SENSEHAT_JOYSTICK_PUSHED_ANY"] = "any";
Blockly.Msg["SENSEHAT_JOYSTICK_PUSHED_LEFT"] = "left";
Blockly.Msg["SENSEHAT_JOYSTICK_PUSHED_UP"] = "up";
Blockly.Msg["SENSEHAT_JOYSTICK_PUSHED_RIGHT"] = "right";
Blockly.Msg["SENSEHAT_JOYSTICK_PUSHED_DOWN"] = "down";
Blockly.Msg["SENSEHAT_JOYSTICK_PUSHED_MIDDLE"] = "middle";
Blockly.Msg["SENSEHAT_JOYSTICK_PUSHED_TOOLTIP"] = "When the joystick is pushed to one direction, do some statements.";
Blockly.Msg["DICTIONARIES_CREATE_EMPTY_TITLE"] = "create empty dictionary";
Blockly.Msg["DICTIONARIES_CREATE_EMPTY_TOOLTIP"] = "Returns a dictionary, of length 0, containing no data records.";
Blockly.Msg["DICTIONARIES_CREATE_WITH_CONTAINER_TITLE_VALUE"] = "dictionary";
Blockly.Msg["DICTIONARIES_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this dictionary block.";
Blockly.Msg["DICTIONARIES_CREATE_WITH_INPUT_WITH"] = "create dictionary with";
Blockly.Msg["DICTIONARIES_CREATE_WITH_INPUT_KEY"] = "key"
Blockly.Msg["DICTIONARIES_CREATE_WITH_INPUT_VALUE"] = "value"
Blockly.Msg["DICTIONARIES_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["DICTIONARIES_CREATE_WITH_ITEM_TOOLTIP"] = "Adds a key-value pair to the dictionary.";
Blockly.Msg["DICTIONARIES_CREATE_WITH_TOOLTIP"] = "Creates a dictionary with any number of key-value pairs.";
Blockly.Msg["DICTIONARIES_LENGTH_TITLE"] = "length of %1"
Blockly.Msg["DICTIONARIES_LENGTH_TOOLTIP"] = "Returns the length of a dictionary."
Blockly.Msg["DICTIONARIES_CREATE_WITH_LIST_TITLE"] = "create dictionary with key list %1 value %2"
Blockly.Msg["DICTIONARIES_CREATE_WITH_LIST_TOOLTIP"] = "Creates a dictionary with a key list and a default value."
Blockly.Msg["DICTIONARIES_ISEMPTY_TITLE"] = "%1 is empty"
Blockly.Msg["DICTIONARIES_ISEMPTY_TOOLTIP"] = "Returns true if the dictionary is empty."
Blockly.Msg["DICTIONARIES_UPDATE_TITLE"] = "update dictionariy1 %1 with dictionary2 %2"
Blockly.Msg["DICTIONARIES_UPDATE_TOOLTIP"] = "Updates a dictionary with another, new keys wil be added and same keys will be updated."
Blockly.Msg["DICTIONARIES_SET_KEY_TITLE"] = "in dictionary %1 set key %2 as %3"
Blockly.Msg["DICTIONARIES_SET_KEY_TOOLTIP"] = "Sets the value of a key in a dictionary."
Blockly.Msg["DICTIONARIES_GET_KEY_DICT"] = "in dictionary"
Blockly.Msg["DICTIONARIES_GET_KEY"] = " get value by key"
Blockly.Msg["DICTIONARIES_POP_KEY"] = "get and remove value by key"
Blockly.Msg["DICTIONARIES_DEL_KEY"] = "remove value by key"
Blockly.Msg["DICTIONARIES_GET_KEY_TOOLTIP"] = "Returns the value of a key in a dictionary."
Blockly.Msg["DICTIONARIES_POP_KEY_TOOLTIP"] = "Removes and returns the value of a key in a dictionary."
Blockly.Msg["DICTIONARIES_DEL_KEY_TOOLTIP"] = "Removes the item by the given key in a dictionary."
Blockly.Msg["DICTIONARIES_KEYS_DICT"] = "in dictionary"
Blockly.Msg["DICTIONARIES_KEYS_KEY"] = "get key list"
Blockly.Msg["DICTIONARIES_KEYS_VALUE"] = "get value list"
Blockly.Msg["DICTIONARIES_KEYS_TOOLTIP"] = "Returns the list of keys in a dictionary."
Blockly.Msg["DICTIONARIES_VALUES_TOOLTIP"] = "Returns the list of values in a dictionary."
Blockly.Msg["DICTIONARIES_KEY_IN_TITLE"] = "key %1 %2 dictionary %3"
Blockly.Msg["DICTIONARIES_KEY_IN"] = "in"
Blockly.Msg["DICTIONARIES_KEY_NOT_IN"] = "not in"
Blockly.Msg["DICTIONARIES_KEY_IN_TOOLTIP"] = "Returns whether a key is in the dictionary, true or false."
Blockly.Msg["TUBE_INITIALIZE_TITLE"] = "set GPIO %1 (CLK) %2 (DIO) as digital tube %3 brightness %4 dp %5"
Blockly.Msg["TUBE_INITIALIZE_TOOLTIP"] = "Connects a 4-digits 7-segments LED tube with TM1637 controller to two GPIO ports, set brightness 0-7, check dp if it has decimal points."
Blockly.Msg["TUBE_BRIGHTNESS_TITLE"] = "set %1 brightness %2"
Blockly.Msg["TUBE_BRIGHTNESS_TOOLTIP"] = "Sets the display brightness 0-7."
Blockly.Msg["TUBE_WRITE_TITLE"] = "%1 display %2 offset %3"
Blockly.Msg["TUBE_WRITE_TOOLTIP"] = "Displays text or numbers, offset 0-3 to the left digit."
Blockly.Msg["TUBE_NUMBER_TITLE"] = "%1 display number %2"
Blockly.Msg["TUBE_NUMBER_TOOLTIP"] = "Displays a numeric value -999 through 9999, right aligned."
Blockly.Msg["TUBE_NUMBERS_TITLE"] = "%1 display numbers %2 : %3 %4"
Blockly.Msg["TUBE_NUMBERS_TOOLTIP"] = "Displays two numeric values -9 through 99, with leading zeros and separated by a colon."
Blockly.Msg["TUBE_TEMPERATURE_TITLE"] = "%1 display temperature %2 ℃"
Blockly.Msg["TUBE_TEMPERATURE_TOOLTIP"] = "Displays temperature in Celsius degrees,works for range -9 to 99."
Blockly.Msg["TUBE_SHOW_TITLE"] = "%1 display text %2"
Blockly.Msg["TUBE_SHOW_TOOLTIP"] = "Displays a text string, no more than 4 characters."
Blockly.Msg["TUBE_SCROLL_TITLE"] = "%1 scroll text %2 delay %3 ms"
Blockly.Msg["TUBE_SCROLL_TOOLTIP"] = "Scrolls a text string from right to left with the given delay, 250ms means 4 fps."
Blockly.Msg["TUBE_CLEAR_TITLE"] = "clear %1"
Blockly.Msg["TUBE_CLEAR_TOOLTIP"] = "Clears the digital tube."
Blockly.Msg["CAMERA_ENABLE_TITLE"] = "%1 camera"
Blockly.Msg["CAMERA_ENABLE_ENABLE"] = "enable"
Blockly.Msg["CAMERA_ENABLE_STOP"] = "stop"
Blockly.Msg["CAMERA_ENABLE_TOOLTIP"] = "Enables or disables the Picamera module."
Blockly.Msg["CAMERA_PREVIEW_TITLE"] = "%1 preview"
Blockly.Msg["CAMERA_PREVIEW_OPEN"] = "open"
Blockly.Msg["CAMERA_PREVIEW_CLOSE"] = "close"
Blockly.Msg["CAMERA_PREVIEW_TOOLTIP"] = "Opens or closes a preview window for the camera."
Blockly.Msg["CAMERA_CAPTURE_TITLE"] = "capture image %1 . %2"
Blockly.Msg["CAMERA_CAPTURE_TOOLTIP"] = "Captures an image from the camera, storing it in the given path/filename and format."
Blockly.Msg["CAMERA_RECORD_TITLE"] = "record video %1 .h264"
Blockly.Msg["CAMERA_RECORD_TOOLTIP"] = "Starts recording video from the camera, storing it in the given path/filename in h264 format."
Blockly.Msg["CAMERA_STOP_RECORDING_TITLE"] = "stop recording video"
Blockly.Msg["CAMERA_STOP_RECORDING_TOOLTIP"] = "Stops recording video."
Blockly.Msg["CAMERA_WEB_STREAM_TITLE"] = "start web video streaming, port: %1"
Blockly.Msg["CAMERA_WEB_STREAM_TOOLTIP"] = "Starts HTTP video streaming on your RPi ip and given port. Open the link http://your-pi-ip:port/stream.mjpg with any web browser or video player to watch the stream."
Blockly.Msg["CAMERA_RESOLUTION_TITLE"] = "set camera resolution %1 x %2"
Blockly.Msg["CAMERA_RESOLUTION_TOOLTIP"] = "Sets the resolution at which image captures, video recordings, and previews will be captured."
Blockly.Msg["CAMERA_FLIP_TITLE"] = "flip camera %1"
Blockly.Msg["CAMERA_FLIP_H"] = "horizontally"
Blockly.Msg["CAMERA_FLIP_V"] = "vertically"
Blockly.Msg["CAMERA_FLIP_TOOLTIP"] = "Sets whether the camera\'s output is horizontally/vertically flipped."
Blockly.Msg["CAMERA_ROTATE_TITLE"] = "rotate camera %1"
Blockly.Msg["CAMERA_ROTATE_TOOLTIP"] = "Sets the current rotation of the camera\'s image."
Blockly.Msg["CAMERA_FRAMERATE_TITLE"] = "set camera framerate %1"
Blockly.Msg["CAMERA_FRAMERATE_TOOLTIP"] = "Sets the framerate at which video recordings, and previews will run."
Blockly.Msg["CAMERA_ANNOTATE_TEXT_TITLE"] = "add annotation text %1"
Blockly.Msg["CAMERA_ANNOTATE_TEXT_TOOLTIP"] = "Sets a text annotation for all output. Only ASCII characters available, with a limited length of 32 characters."
Blockly.Msg["CAMERA_ANNOTATE_SIZE_TITLE"] = "set annotation size %1"
Blockly.Msg["CAMERA_ANNOTATE_SIZE_TOOLTIP"] = "Sets the size of the annotation text."
Blockly.Msg["CAMERA_ANNOTATE_COLOUR_TITLE"] = "set annotation %1 colour %2"
Blockly.Msg["CAMERA_ANNOTATE_COLOUR_FOREGROUND"] = "foreground"
Blockly.Msg["CAMERA_ANNOTATE_COLOUR_BACKGROUND"] = "background"
Blockly.Msg["CAMERA_ANNOTATE_COLOUR_TOOLTIP"] = "Sets the brightness or the background colour of the annotation text."
Blockly.Msg["CAMERA_ISO_TITLE"] = "set iso %1"
Blockly.Msg["CAMERA_ISO_AUTO"] = "auto"
Blockly.Msg["CAMERA_ISO_TOOLTIP"] = "Sets the apparent ISO setting of the camera."
Blockly.Msg["CAMERA_SHUTTER_SPEED_TITLE"] = "set shutter speed %1 μs"
Blockly.Msg["CAMERA_SHUTTER_SPEED_TOOLTIP"] = "Sets the shutter speed of the camera in microseconds."
Blockly.Msg["CAMERA_BRIGHTNESS_TITLE"] = "set image brightness %1"
Blockly.Msg["CAMERA_BRIGHTNESS_TOOLTIP"] = "Sets the brightness setting of the camera(0~100)."
Blockly.Msg["CAMERA_SHARPNESS_TITLE"] = "set image sharpness %1"
Blockly.Msg["CAMERA_SHARPNESS_TOOLTIP"] = "Sets the sharpness setting of the camera(-100~100)."
Blockly.Msg["CAMERA_CONTRAST_TITLE"] = "set image contrast %1"
Blockly.Msg["CAMERA_CONTRAST_TOOLTIP"] = "Sets the contrast setting of the camera(-100~100)."
Blockly.Msg["CAMERA_SATURATION_TITLE"] = "set image saturation %1"
Blockly.Msg["CAMERA_SATURATION_TOOLTIP"] = "Sets the saturation setting of the camera(-100~100)."
Blockly.Msg["CAMERA_AWB_MODE_TITLE"] = "set awb mode %1"
Blockly.Msg["CAMERA_AWB_MODE_AUTO"] = "auto"
Blockly.Msg["CAMERA_AWB_MODE_SUNLIGHT"] = "sunlight"
Blockly.Msg["CAMERA_AWB_MODE_CLOUDY"] = "cloudy"
Blockly.Msg["CAMERA_AWB_MODE_SHADE"] = "shade"
Blockly.Msg["CAMERA_AWB_MODE_TUNGSTEN"] = "tungsten"
Blockly.Msg["CAMERA_AWB_MODE_INCANDESCENT"] = "incandescent"
Blockly.Msg["CAMERA_AWB_MODE_FLUORESCENT"] = "fluorescent"
Blockly.Msg["CAMERA_AWB_MODE_FLASH"] = "flash"
Blockly.Msg["CAMERA_AWB_MODE_HORIZON"] = "horizon"
Blockly.Msg["CAMERA_AWB_MODE_TOOLTIP"] = "Sets the auto-white-balance mode of the camera."
Blockly.Msg["CAMERA_EXPOSURE_COMPENSATION_TITLE"] = "set exposure compensation %1"
Blockly.Msg["CAMERA_EXPOSURE_COMPENSATION_TOOLTIP"] = "Sets the exposure compensation level of the camera(-25~25)."
Blockly.Msg["CAMERA_EXPOSURE_MODE_TITLE"] = "set exposure mode %1"
Blockly.Msg["CAMERA_EXPOSURE_MODE_AUTO"] = "auto"
Blockly.Msg["CAMERA_EXPOSURE_MODE_NIGHT"] = "night"
Blockly.Msg["CAMERA_EXPOSURE_MODE_NIGHTPREVIEW"] = "night preview"
Blockly.Msg["CAMERA_EXPOSURE_MODE_BACKLIGHT"] = "backlight"
Blockly.Msg["CAMERA_EXPOSURE_MODE_SPOTLIGHT"] = "spotlight"
Blockly.Msg["CAMERA_EXPOSURE_MODE_SPORTS"] = "sports"
Blockly.Msg["CAMERA_EXPOSURE_MODE_SNOW"] = "snow"
Blockly.Msg["CAMERA_EXPOSURE_MODE_BEACH"] = "beach"
Blockly.Msg["CAMERA_EXPOSURE_MODE_VERYLONG"] = "very long"
Blockly.Msg["CAMERA_EXPOSURE_MODE_FIXEDFPS"] = "fixed fps"
Blockly.Msg["CAMERA_EXPOSURE_MODE_ANTISHAKE"] = "antishake"
Blockly.Msg["CAMERA_EXPOSURE_MODE_FIREWORKS"] = "fireworks"
Blockly.Msg["CAMERA_EXPOSURE_MODE_TOOLTIP"] = "Sets the exposure mode of the camera."
Blockly.Msg["CAMERA_METER_MODE_TITLE"] = "set metering mode %1"
Blockly.Msg["CAMERA_METER_MODE_AVERAGE"] = "average"
Blockly.Msg["CAMERA_METER_MODE_SPOT"] = "spot"
Blockly.Msg["CAMERA_METER_MODE_BACKLIT"] = "backlit"
Blockly.Msg["CAMERA_METER_MODE_MATRIX"] = "matrix"
Blockly.Msg["CAMERA_METER_MODE_TOOLTIP"] = "Sets the metering mode of the camera."
Blockly.Msg["CAMERA_IMAGE_EFFECT_TITLE"] = "set image effect %1"
Blockly.Msg["CAMERA_IMAGE_EFFECT_NONE"] = "none"
Blockly.Msg["CAMERA_IMAGE_EFFECT_NEGATIVE"] = "negative"
Blockly.Msg["CAMERA_IMAGE_EFFECT_SOLARIZE"] = "solarize"
Blockly.Msg["CAMERA_IMAGE_EFFECT_SKETCH"] = "sketch"
Blockly.Msg["CAMERA_IMAGE_EFFECT_DENOISE"] = "denoise"
Blockly.Msg["CAMERA_IMAGE_EFFECT_EMBOSS"] = "emboss"
Blockly.Msg["CAMERA_IMAGE_EFFECT_OILPAINT"] = "oilpaint"
Blockly.Msg["CAMERA_IMAGE_EFFECT_HATCH"] = "hatch"
Blockly.Msg["CAMERA_IMAGE_EFFECT_GPEN"] = "G pen"
Blockly.Msg["CAMERA_IMAGE_EFFECT_PASTEL"] = "pastel"
Blockly.Msg["CAMERA_IMAGE_EFFECT_WATERCOLOR"] = "watercolour"
Blockly.Msg["CAMERA_IMAGE_EFFECT_FILM"] = "film"
Blockly.Msg["CAMERA_IMAGE_EFFECT_BLUR"] = "blur"
Blockly.Msg["CAMERA_IMAGE_EFFECT_SATURATION"] = "saturation"
Blockly.Msg["CAMERA_IMAGE_EFFECT_COLORSWAP"] = "colour swap"
Blockly.Msg["CAMERA_IMAGE_EFFECT_WASHEDOUT"] = "washed out"
Blockly.Msg["CAMERA_IMAGE_EFFECT_POSTERISE"] = "posterise"
Blockly.Msg["CAMERA_IMAGE_EFFECT_COLORPOINT"] = "colour point"
Blockly.Msg["CAMERA_IMAGE_EFFECT_COLORBALANCE"] = "colour balance"
Blockly.Msg["CAMERA_IMAGE_EFFECT_CARTOON"] = "cartoon"
Blockly.Msg["CAMERA_IMAGE_EFFECT_DEINTERLACE1"] = "deinterlace1"
Blockly.Msg["CAMERA_IMAGE_EFFECT_DEINTERLACE2"] = "deinterlace2"
Blockly.Msg["CAMERA_IMAGE_EFFECT_TOOLTIP"] = "Sets the current image effect applied by the camera."
